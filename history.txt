0.01 : ajax alpha, views, templates
0.02 : event bus
0.03 : ajax with callback and errHandler per call
0.04 : bind plugin
0.05 : states
0.06 : onUiBound event for anonymous plugins, empty hash state
0.07 : crossdomain views load, setupForm check for form, pager update
0.08 : broken for some ie cases, templates IE attribute quotes workaround from http:weblogs.asp.net/alexeigorkov/archive/2010/03/16/lazy-html-attributes-wrapping-in-internet-explorer.aspx
0.09 : broken for some ie cases, templates IE redone, to avoid bug with "a=!!val!!" situation, isMSIE flag added
0.10 : templates IE one more redone, attributes DOM manipulation, for templates parse, parse template starting with plain text by adding comment, template controls binding
0.11: ajax url override for ajax calls via returning value from specification function
0.12: return from submitForm, template parse results binding changed to merge of filter and find to support no-root templates, added propagate(data) function to views
0.13: comment node removed from template parse results
0.14: events[name].listenersCount++;
0.15: parseInt for inputInt value arrow up
0.16: state parameters - undefined replacement by current value properly, inputDate added, works when datepicker available, formatDate, formatTime added
0.17: propagate "0" and "" passed as valid values
0.18: default state "end" not triggered - fixed
0.19: DEBUG_MODE added, state start vs trigger check in debug mode, event usage check in debug mode
0.20: appId introduced
0.21: root state not packed, go back not packed - fixed, propagate added to parseTemplate results
0.22: onUiBound accepts both app and app.id as first param
0.23: model initial auto-implementation added for method names "add", "remove", "setXXX", "getXXX", "findByXXX"; .xl added
0.24: model modified, "set"/"get" replaced by single method xxx(optional_param), in jquery style, added global "on" event for any model change. incompatible with 0.23
0.25: radio button handled properly in propagate function
0.26: jiant.STATE_EXTERNAL_BASE added for navigation to another page in frames of state change, fixed multiple apps on a page mixing
0.27: predefined model functions not created automatically more
0.28: ajaxPrefix, ajaxSuffix, stateExternalBase per application for multi-app support
0.28.1: minor fix for "" comparison
0.29: refreshState() workaround for used History plugin timeout, states tuning, per app cross domain via flag for multiple app cross/noncross domain mix, form influenced by ajax pre/suff
0.30: cross domain settings for submitForm
0.31: addAll() method added to model with auto-wrap for all source object properties
0.32: propagate() fixed for templates, propagate(model) with auto data binding added, customRenderer(elem, value, isUpdate) for view/template controls
0.33: refreshTabs added to jiant.tabs, logInfo prints any amount of arguments
0.34: override unsafe extended properties with user jiant specified
0.35: customRenderer accepts 4 parameters: bound object, bound view, new field value, is update
0.36: models.on fixed - fired for target object only, models.update() added
0.37: provided implementation for model functions support
0.38: models.updateAll, models.update.on triggered on addAll, AI on .update.on subscription to spec
0.39: $.History replaced by $.hashchange usage
0.40: triggering current state for later registered state handlers, logError accepts any amount of arguments, model events manipulations
0.41: transact update() of models
0.42: mixed case field name support by findByXXX, minor fixes
0.43: default renderer handles missing view elements
0.44: initial state switch fixed
0.45: app.dirtyList added, app.appPrefix with new bindUi syntax added
0.46: lfill made public
0.47: added asaa/asap synonim functions to models for synchronization by value availability, added jiant.getCurrentState()
0.48 global model .on() fixed, now works
0.49 per view/template appPrefix support, for better cross-application integration, added version() function and override by latest version
0.50 fixed multiple apps events/states intersection, still exists tracking bug with events/statesUsed for multiple apps
0.51 fix for minor bug in 0.50 - no notification on state end for 2nd application on a page
0.52 findByXXXAndYYYAndZZZ() support for models, find by several parameters, separated by And
0.53 setXXXAndYYYAndZZZ(xxx, yyy, zzz) support for models, set several fields
0.54 custom behaviour injection into model via functions with more than 1 argument and empty body
0.55 reverted 0.54, added logic support, added shortenings for sections: (v)iews, (m)odels, (t)emplates, (e)vents, (a)jax, (s)tates, (l)ogic
0.56 parseTemplate executes propagate, customRenderer accepts one more parameter - reference to parse result or view, double bindUi call notify, 0-len params on ajax call fix
0.57 parseTemplate call without parameters supported
0.58 dependency load logic via onUiBound parameter, every logic received .implement(obj) method, for implementation declaration, 0.55 logic behaviour cancelled
0.59 asap() fixed, wrong params when value already set
0.60 parseTemplate logs error to console on parse failure, inputInt: left/right keys enabled, added dot/comma keys, added inputFloat
0.61 formatDate() independent from datepicker
0.62 UiFactory extracted, it is possible to override it
0.63 UiFactory updated, check for setUiFactory added, removed reporting of missing elements of already missing view
0.64 UiFactory applied to template components via viewComponent() call
0.65 parseState pack/unpack fixed (removed old seldom occuring bugs), data objects can be passed as state params from now
0.66 models.add from now is same as models.addAll, not back compatible, added DEBUG_MODE.data switch,
updateAll now accepts 3 arguments: updateAll(arr, removeMissing, matcherCb), arr - could be single item or array,
removeMissing - is to remove missing elements (default false), matcherCb(elem1, elem2) - comparator, default - by id
0.67 updateAll fixed - addAll() call added for new elements
0.68 fixed - state.go() ignored set of undefined params to previous state values, when they are on the tail
0.69 propagate() calls customRenderer() for all view elements with customRenderer assigned
0.70 model updateAll fixed, removeMissing not used fixed
0.71 jiant.meta added - field annotated with meta skipped during binding and used by application for metainformation
0.72 lfill and format functions improved, basing on tests
0.73 extra update event calls removed
0.74 onAppInit callback was added
0.75 setTimeout checker for dependency in dev mode
0.76 formatDateUsa added, produces MM/DD/YYYY date presentation
0.77 INCOMPATIBLE MODELS CHANGE! findByXXX returns single element (may be null), and new listByXXX methods return array
0.78 .on(cb) handler for model fields gets one more parameter, oldVal: cb(obj, val, oldVal), for convenience
0.79 .off(hndlr) added for all model properties, it accepts handler, returned by .on method. Also propagate
unsubscribes from previous model when bound to new, inputInt() change value by up/down arrows now trigger change event
0.80: input type=checkbox now propagated, customRenderer last parameter fixed
0.81: per application states supported, mix of multiple stateful applications supported
0.82: formatDateUsa fix
0.83: per application states - initial wasn't fired fix
0.84: asMap for models
0.85: jiant.refreshState() fixed after been broken by 0.81
0.86: hashchange() directly called after state set, to resolve hashchange async behaviour
0.87: multiple apps onUiBound: onUiBound([app1Id, app2Id...], depsList, function($, app1, app2...))
0.88: customRenderer for templates - last param changed to parse result, not specification reference
0.89: time to bind UI now properly reported in console instead of previous random number
0.90: randomIntBetween(from, to) function added
0.91: cross domain bindUi creates container with provided id, if it doesn't exist already
0.92: count of unbound logics printed into console, to hint developer. Internal storage of data in model changed, all() returns copy of storage
0.92.1: fix of setXAndY
0.93: info(arr), error(arr) methods added, printing all arguments as single string
0.93.1: formatDate fix
0.94: refreshState(appId) - optional appId - id or application to refresh state for, all app refreshed if not provided
0.95: initial states double update fixed, removed comment
0.96: formatMoney(amount, grpDelim) added
0.96.1: minification warning removed
0.97: addAll not called for empty arguments, addAll(null) is no more equals addAll([null])
0.97.1: right pad dot supported by input float
0.98: pager adopted to bootstrap 3
0.98.1: model.update(obj, treatMissingAsNulls) accepts second parameter - enforce all missing fields to be set to null - update({}, true)
0.99: external shared modules via declare(moduleName, {func0: function() {..}, func1: ...}), then could be used as app.logic.moduleName.func0, etc
1.00: some visualization fun, call jiant.visualize() in console to see graph of app structure. Have graph.js, arbor.js located near jiant.js
1.01: inter-states parameters fix
1.02: remote reference to visualize() deps, visualize() improvements
1.03: state groups for sharing parameters between different states
1.04: external libs load via declare(name, url)
1.04.1: extra check for external libs load
1.04.2: external modules load before application existence fixed
1.05: one more async scenario covered for external libs load
1.06: loadLibs(arr, cb, devMode) added, infop(), errorp() added, accept !! as substitution value - infop("!! example", "My") produces "My example"
1.07: added functions valInt()/valFloat(), valMin(val), valMax(val) to inputInt and inputFloat elements, added nlabel label type for coming intl
1.08: base intl functionality implemented - autogeneration of translation functions, next - nlabel, missing translations reporting, multiple json sources
1.09: jiant.nlabel support; valMax, valMin renamed to setMax, setMin to designate they're setters; added error() for not found translations
1.10: cssMarker control type added - with attached customRenderer, adds/removes class on element: ctlName_fieldValue
1.11: visualize() via loadLibs, async logics load - more scenarious supported
1.12: pick(marker) added for time measure, added ajax duration to ajax info print
1.13: jiant.nlabel fix - referred to label
1.13.1: pick() text tuned
1.14: states params fix - "undefined" is always undefined
 1.15: reverse binding via propagate(.., .., true) - for .val elements
 1.15.1: model function fields extracted for ajax call
 1.16: empty state "" auto-added, if states declared
 1.17: jiant.pager.refreshPage() added to refresh current pager page and trigger all listeners
 1.18: cssMarker tuned, also adds both componentId_value and componentId classes, removes completely for undefined vals
 1.19: model.data() function added, returns source data unchanged, for most lazy data usage with other model benefits
 1.19.1: pager minor behaviour fix
 1.20: model ajax parse fix
 1.21: collection proxy functions added to models
 1.22: collection functions fix - setters didn't work, now ok
 1.23: jiant.data ctl type added for views/templates, saves provided data to data-name attribute, fld: jiant.data, view.fld() === view.attr("data-fld")
 1.24: jiant lifecycle application listeners added, via addListener(listener)/removeListener(listener), logger separated
 1.25: listeners methods used when available, built-in state debuggers extracted to listeners, DEBUG_MODE.states removed
 1.26: ajax logging moved to listener, debugAjax.js
 1.27: debugEvents removed, debugData removed, DEBUG_MODE removed, listener methods renamed
 1.28: parsedTemplate added to listeners
 1.29: getCurrentState now accepts application, not only id as before
 1.30: state.start parameters now passed as integers, if they are integers
 1.31: overlapped multiple cssMarker in templates fixed
 1.32: obj.remove() now works, same as model.remove(obj)
 1.33: multiple cssMarkers on single element fixed for views
 1.34: re-commit previous fix, and removed setting of field name class in cssMarker
 1.35: add, addAll fixed - now doing subscribers notification when all fields are set
 1.36: non-empty model functions supported, using this. reference to refer to other object methods
 1.37: model function add() removed, addAll() should be used instead. To avoid mess in events
 1.38: redone of previous fix, add() remains, addAll() produces alert about need to replace it and doesn't work more
 1.39: customRenderer(obj, elem) available for view and template instances, called once per propagate(), doesn't subscribe for updates, useful for template UI setup
 1.40: added utility function getURLParameter(name)
 1.41: reverse binding off for view re-propagation scenario
 1.42: fixed external logic declaration scenario - .declare call between bind performed and dependency declared
 1.43: .declare accepts function as 2nd parameter: jiant.declare("name", function($, app)), it should return logic implementation
 1.44: added to jiant.image reload(url) functions
 1.45: added new field type cssFlag, works like name_true, name_false, but sets/removes "name" css class only, without suffix
 1.46: reverse binding for checkboxes implemented, propagate setting of non-string values for select input implemented
 1.47: jiant.asObjArray(arr, name[, idxName]) converts [2, 3, 5] to [{name: 2}, {name: 3}, {name: 5}], optional {name:2, idxName: 0}
 1.48: nlabel now also translates arrays, returning comma separated translations, nlabel works for templates
 1.49: empty array considered as undefined for cssFlag
 1.50: reverse binding for non-model fields had broken code
 1.51: propagate(.., true) updates all customRenderers for non-standard fields on any object change
 1.52: parseTemplate(data, subscribeForUpdates) accepts second parameter, it converted to boolean and used for propagate() call. False by default
 1.53: autoupdate of custom renderers temporary removed due to performance issues
 1.54: customRenderer auto updated, model spec .on works as before, single model object .on triggers only on specified object update
 1.55: more consistent internal event fire
 1.56: jiant.ctlHide added, hides view on click
 1.57: by default 2nd parameter of parseTemplate() is false, while 2nd of propagate() is true, for full compatibility with previous version
 1.58: double intlProxy for views nlabel fixed
 1.59: usage of templates nlabel inside of ["intl"] dependency fixed
 1.60: asMap() and data() added to model collection functions
 1.61: templates data() field overlap fixed
 1.62: i18n (http://i18next.com/) integration for intl logic, via setting "i18n: true" logic field
 1.63: i18n integration supports java-style {0} and i18n style __varname__ substs, switched by javaSubst option on intl logic
 1.64: parseTemplate one more arg, reverseBind, for reverse binding on propagate: function(data, subscribeForUpdates, reverseBind)
 1.65: "impl" field added to views and templates, to specify implementation inline, like appView: { impl: "<div><span class="_container" ..., inputInt enhanced
 1.66: pager now adds class totalPages_N, N - is amount of total pages, for better styling
 1.67: inputInt and inputFloat fix
 1.68: submitForm uses ajax errorHandler for errors notifications
 1.69: return false from .on handler to stop immediate event propagation
 1.70: minor import logic related fixes
 1.71: semaphores added, for flags set/wait; semaphore.release() and semaphore.on(cb)
 1.72: event.off added, accepts handler returned by event.on
 1.73: numLabel label type added, formats values as 123,456,000
 1.74: more intellectual ajax parameters parsing, with arrays and inner objects support. COULD BE BACKWARD INCOMPATIBLE!
 1.75: datepicker change event triggered, undefined propagated to inputs value, model.reset(val) added to reset all fields to "val" value
 1.76: jiant.inputSet added, maps model field array value to set of checkboxes, with reverse binding. Mapped by checkbox value
 1.77: binding of array to cssMarker now produces multiple classes, related to array elements: class="marker_val0, marker_val1"
 1.78: jiant.nvl(val, defVal, path) added, returns defVal, if val is null or undefined, path is optional, val[path], may be function
 1.79: ajax call parsing tuned
 1.80: jiant.inputSetAsString added, same as inputSet, but uses comma-separated string instead of array
 1.81: cssMarker splits value by ","
 1.81.1: cssMarker split fix
 1.82: added pager.val([value]) method to set pager page programmatically
 1.83: more spring-friendly way for arrays presentation in ajax calls
 1.83.1: cssMarker one more split fix
 1.83.2: cssMarker 3rd tuning, hope last
 1.84: pager first and last elements now have classes pager_first, pager_last, for better customization
 1.84.1: rounding of odd page radiuses
 1.85: rollback of 1.83, it breaks submit of model.all(), reverse bind of radio inputs to model
 1.85.1: firefox + firebug recursion glitch workaround
 1.86 jiant.registerCustomType(typeName, handler(uiElem) {}) to add user custom control types, like someView: {elem0: "customtype", typeName is string
 1.87: finally both java spring @RequestParameter and @ModelAttribute compatible arrays representation, jiant.transientFn added for non-ajaxable model fields
 1.88: model update() call now applies .on event handler with proper oldValue 3rd argument, add() still passes new value for both .on val and oldVal args
 1.89: ajax calls return result of $.ajax, some hints printed to console for possible misuse of listBy, findBy
 1.90: proper check for param presence in ajax call to not skip arrays of 0, null and undefined
 1.91: date format for jiant.inputDate now could be set per application as app.dateFormat: "MM/dd/yyyy"
 1.92: internal optimization, types array could be used for element declaration: someLabel: [jiant.numLabel, "customtype"], useful for custom types
 1.92.1: ajax error handler tuning
 1.92.2: ajax parameters fix, when sending array of arrays
 1.93: internal code optimization
 1.93.1: ajax parameters parsing, array of nulls
 1.94: jiant.forget - removes application from loaded list, enabling repeating calls to bindUi from same application
 1.95: jiant.modules app section added, jiant.module(name, function($, app - to register module in app, cb called before bindUi
 1.96: app structure rollback after forget call, app re-load onUiBound works only for modules, single UiBound triggers once
 1.97: reverse binding applied only to input/textarea elements
 1.98: proper forgetting ajax functions
 1.98.1: .off for non-jquery view elements now doesn't break code
 1.99: model empty function for getters handles any whitespaces inside of declaration
 2.00: modules updated, loaded via urls, modules: {modName: modUrl, etc...}, jiant.imgBg control type addded
 2.01: jiant.override(logicOrName, function($, app, currentImpl) - override logic implementation, may be called before bind; jiant.implement(logic, impl) added
 2.01.1: inputSetAsString input types fix
 2.01.2: strict mode fix for some input data parameters
 2.02: jSubmitAsMap could be set for ajax submitted object to enforce param[key] instead of param.key (due to spring limitations)
 2.03: jiant.bindView(appRoot, viewId, viewContent, view) added
 2.03.1: app.modulesPrefix used as prefix for modules load
 2.04: loaded modules execution order preserved, jiant.override accepts only logic, not name
 2.05: order of modules could be specified as modules: { m0: {url: "url", order: "3", getURLParameter return null for missing params
 2.06: viewOrTm.propagate(obj, subscr, reverse, mapping) - mapping added, maps view field to obj field: {"nameLabel": "name", asMap(mapping) to re-map names
 2.06.1: empty prefix used when appPrefix not specified in any way
 2.07: collection functions attached to add() result
 2.07.1: ajax check for "error" status when user leaves page
 2.08: parseTemplate one more arg, mapping: parseTemplate(obj, subscribeForUpdates, reversePropagate, mapping), functions called during parse
 2.09: model defaults could be specified via model: { field0, field1, defaults: { field0: 1, field1: "a"
 2.09.1: getParamNames is public as getFunctionParamNames(fn)
 2.09.2: getDeclaredName(ajax) return declared ajax function name
 2.10: module naming error hint, proper oldVal === undefined passed to .add first call
 2.11: setX and others check for X uppercase, sumX auto-function added, return sum of all x fields in collection (sumXAndY also valid)
 2.12: model.repo {} should be used for model collection functions. both old mixed and new separated formats supported
 2.13: defaults for states introduced to specify default value for undefined, it overrides states groups
 2.13.1: no-defaults state fix
 2.14: model.repo and model.defaults fields name per app possibility via (app.modelRepoFieldName, app.modelDefaultsFieldName)
 2.15: absolute urls for modules support, repo/defaults names per model, not app (redone 2.14), via jiantDefaults or jiantRepo flag inside of section
 2.15.1: minor fix for already loaded all modules
 2.16: jiant.flags, jiant.refs for public reflection
 2.16.1: states defaults/undefineds mix fix
 2.16.2: warning about old model repo format
 2.16.3: refs used as functions: model[jiant.refs.modelRepoRefName]() to avoid problems with $.extend
 2.16.4: template data copy protection vs infinite recursion
 2.17: jquery names intersection bug fix in models
 2.18: supplier methods of model (starting with "return") results passed to ajax call, jiant.isModelSupplier and jiant.isModelAccessor for testing model fields
 2.18.1: proper context for supplier call to support this.
 2.18.2: no-repo error shown only for spec and as info
 2.19: asMap(mapping, deep) - to iterate model recursively, jiant.isModel - to check is object model, jiant.packForState, jiant.unpackForState are public
 2.20: defaults/repo renamed to jDefaults/jRepo for more uniqueness
 2.21: asMap deep supports maps with models as values
 2.21.1: internal minor reorganizations
 2.21.2: better values mapping for inputSetAsString
 2.21.3: defaults functions now use passed object as this
 2.22: multiple UI elements could be bound to single jiant.pager declaration
 2.23: added model field .onAndNow method, similar to asap, but subscribes for all field updates
 2.24: restructure, amd compatible, anonymous model declared in amd environment
 2.25: further amd integration, amdConfig could be passed as last parameter for bindUi call, modules used as array for require call
 2.26: fixed non-singleton scenario, jiant.getApps() returns currently loaded applications
 2.27: jiant.module means define, name ignored, modules usage in any way require amd, object modules declaration supported, loadApp() added
 2.27.1: restructure code
 2.28: modules could be set as arr of objects for folders structure: [{"shared": ["m0", "m1"]} is same as ["shared/m0", "shared/m1"]
 2.28.1: jiant.registerCustomType("tp", function(elem, view, app) - custom type handler extra parameters
 2.29: error in console if onUiBound(undefined) called, modules executed if function returned from define: function($, app, jiant)
 2.30: removed loadApp, requirejs usage; modules returned to pre-2.24, other functionality remains, module dependencies not supported yet
 2.31: module dependencies supported, jiant.module(name, deps, function($, app, moduleParams) {}), executed in given order, app.modulesTimeout sets timeout for script load
 2.32: jiant.preUiBound(app, cb) added for pre-configuration of application
 2.33: app(app), onApp(app, deps, cb), preApp(app, cb) shorter synonyms for UiBind, app accepts only parameter - app, other moved to application definition
 2.33.1: jiant.preApp("*", cb) executed for all applications to be loaded
 2.33.2: fixed notification about non-resolved depends, it appears in console after 5 seconds in dev mode
 2.33.3: module load intitiated by fix
 2.33.4: sub-dependency module double-path fix
 2.34: transitive module deps load
 2.35: jiant.check(bool, errMessage) - alerts error in debug mode, prints to error log always, devMode of bindUi ignored, should be set via jiant.DEV_MODE, default devMode false
 2.36: jiant.intro.isTemplate(obj) - to check is given object jiant template
 2.36.1: null implementation possible for logic function
 2.36.2: model object update event not fired fixed
 2.36.3: event bus proper .off
 2.37: view/tm.off unbinds from model notifications if propagated - both direct and reverse
 2.37.1: set from function check fix
 2.37.2: module present in modules and dependencies - proper execution order fixed
 2.38: state.replace new generated method, to replace state without keeping nav history
 2.39: element types defined as strings, to enable $.extend(app, baseApp)
 2.40: handler returned by model.field.on now contains .off method, hanlder.off() could be used
 2.41: internal models implementation rewritten to prototypes inheritance, refs removed, modelObj.fld.on replaced by modelObj.on("fld", spec.fld.on still usable
 2.41.1: debug print removed
 2.42: collection functions optimization, handlers to fields attached as obj.fldName_on, obj.fldName_asap, obj.fldName_onAndNow, obj.fldName_off
 2.42.1: suppliers on spec missing flag fixed
 2.42.2: ajax auto parse fix for new Model and Collection
 2.42.3: reverse propagate fix for new Model
 2.43: pick(marker, threshold) - only exceeding threshold values are printed, if threshold is passed, returning true if threshold is exceeded
 2.44: few fixes related to prototypes refactoring
 2.45: findBy / listBy indexing
 2.45.1: template cache added
 2.46: error log reporting on wrong field names for findBy, listBy
 2.46.1: fixed - remove call didn't removed indexes
 2.46.2: unsafe extension reported as info
 2.47: intl logic scanDoc attribute, if set - scans document for data-nlabel attribute and translates them
 2.47.1: reset fixed, treatMissingAsUndefined for update 2nd param instead of previous treatMissingAsNulls
 2.48: repetitive bind application fixes - modules and models
 2.49: getStackTrace is public
 2.49.1: jiant.showTrace() toggles logInfo to logError, for debug print simpler navigation
 2.49.2: modules loading - application has priority on module location, some possible errors logged into console
 2.49.3: custom renderer not called on remove event more
 2.50: model.update() without args just fires update event, model method .subscribers([fieldName]) returns list of registered event handlers
 2.50.1: defaults, defined as function, properly called
 2.50.2: reverse binding for html elements enabled, could be used when change manually triggered by code
 2.50.3: html(undefined) uses "" for propagate value
 2.50.4: firefox URI encode workaround (additional hash decode), %20 will be decoded into space in FF, since this
 2.51: .unpropagate fixed
 2.52: value="undefined" mapped to undefined for inputSet/inputSetAsString and radio, both forward and reverse bindings, lib load time reported
 2.53: view/template component type could be specified as array: [jiant.label, jiant.optional], jiant.optional added for optionally presented elements
 2.53.1: states .replace fixed to use defaults if specified
 2.54: model per field subscriptions added to collection functions, formatMoney(amount, grpDelim, decDelim, decimals) - more parameters
 2.55: jiant.forget completely restores base app structure, cleaning anything added later
 2.56: shortenings added to app always, forget resets all modeles to undefined, events separated to bus per app
 2.56.1: dependency for embedded into main script modules properly handled
 2.56.2: jiant.visualize updated
 2.56.3: removed model cleanup on forget
 2.57: .forget(app, deep) - one more "deep" parameter, to reset models to undefined and to remove css marker/flag classes
 2.57.1: loadLibs forgets pseudo app
 2.58: jiant.loadCss(arrOrUrl, cb) loads css into document
 2.59: jiant.loadModule(app, moduleSpec) loads module into specified application
 2.60: module(name, {js: ..., css: ..., html: ..., injectId: ...}) supported for external components loading
 2.60.1: .js also added to remote url path
 2.60.2: default lib load timeout increased from 500 to 5000 ms
 2.60.3: extra logging removed
 2.61: proper order of js/css/html loading in frames of same module
 2.61.1: proper loaded js eval
 2.62: libs are loaded on module load, checks for missing libs on module execution
 2.62.1: module load info print in dev mode - by whom initiated
 2.62.2: jiant.loadModule accepts both string and array as module spec for load (2nd parameter)
 2.62.3: recursion fixed when called loadModule during app init
 2.63: loadModule(app, modules, cb, injectTo, replace) - 2 more parameters, moved from jiant.module() declaration
 2.63.1: states - prev state vals applied before defaults
 2.63.2: goRoot(appOrId) accepts app or application id (was only id before)
 2.64: parsed template element gets extra CSS class jianttm_<templateId>, to simplify finding template parse results
 2.64.1: some cleanup
 2.65: removed models.onAndNow(replaced by .asapAndOn), added .nowAndOn, .asapAndOn, .once, also added .once for events
 2.65.1: nowAndOn fix
 2.66: bindView already bound view fixed, proper call is jiant.bindView(app, "testView", app.views.testView, $(app.views.testView[0]));
 2.66.1: updateAll(undefined) doesn't break anymore
 2.66.2: bindView parameter viewContent now updated with new state, not keeps old
 2.66.3: empty key not reported as missing translation anymore
 2.67: app.handleErrorFn could be declared to handle ajax errors specifically per application
 2.67.1: model.subscribers() fixed
 2.67.2: nowAndOn returns .on handler, could be used to unsubscribe later
 2.68: models .off fixed, now also supports list.off(list.on), also list.on().off() chains
 2.69: model.jRepo.filter(cb)::Collection, model.jRepo.toCollection(arr)::Collection functions added
 2.69.1: removed "injectTo" from load modules functionality
 2.69.2: cacheKey passed for jiant.parseTemplate2Text(data, cacheKey), template.parseTemplate2Text(data, mapping)
 2.70: statenameCtl: jiant.et.ctl2state new element type sends to state statename (name suffix "Ctl" is optional), jiant.et.ctlBack sends to history back
 2.71: ctrl_alt_click in dev mode copies to clipboard and prints to console CSS path to element, for easier styling, jiant.copy2clipboard(txt) available
 2.72: i18n (i18next) v 3 compatible, intl new options: (interpolation) prefix/suffix
 2.72.1: intl section i18nOptions could be specified for starting options for i18next: intl: { i18nOptions: {...., intl.debugIntl(prefix) prints debug into console
 2.72.2: jiant.et.ctl2root sends to states nearest root via jiant.goRoot(app)
 2.72.3: i18next proper translation time
 2.73: some code optimizations, removed obsolete onappinit
 2.73.1: minor
 2.74: bindModel(modelName, spec, appId) is available via jiant.bindModel
 2.74.1: module always loaded by GET, to handle global setting ajax method = POST to influence module loading method
 2.75: loadModule, preApp fixes to expected behaviour, GET enforced for external html/css modules load
 2.76: jiant.href introduced, for mapping value to "href" attr, view/tm _scan flag introduced, for auto scan and mapping view/template fields to spec
 2.76.1: removed obsolete devMode internally, now could be set properly from query string
 2.76.2: jRepo to model copied functions bug fixed
 2.76.3: fix of wrong condition in models fill
 2.77: changing model in on .add handler now properly reflected in indexes
 2.77.1: intl attaches app.modulesSuffix to intl url
 2.78: .propagate skips jquery objects in models, to avoid re-attaching stored views
 2.79: jiant.registerCustomRenderer(name, function(obj, elem, val, isUpdate, viewOrTemplate) { added, to provide ability attach named custom renderers to elems
 2.80: jiant.comp[onent] added to declare templates/views hierarchy, example: templates.itemSlotTm = {item: jiant.comp("itemTm"}, should refer to template name
 2.80.1: .comp fields access: tmOut.fieldOut.fieldIn
 2.80.2: minor fix for views comp
 2.81 link to embedded template changed, tm.templateSource() method added to templates, returns source code of template
 2.82: loadModules minor fix, semaphore re-release enabled, proper subpath pass to comp subelements
 2.82.1: .comp in views fix
 2.82.2: appRoot.formatGroupsDelim could be set for numLabel formatting
 2.83: ajax method from now may return object {url: "", method: "[post|get|smth else]", paramMapping: {name: "paramName"}},
 /person/:id/save substitution supported by param names
 2.84: ports in url fixed, non-absolute ajax urls prefixed by ajaxPrefix
 2.84.1: labelNum gets class "nowrap", which could by defined in .css as white-space: nowrap
 2.85: ajax method returnable object may contain section headers: {paramName: headerName} for param to headers mapping
 2.85.1: added check for empty function in jRepo model spec, to allow non-empty custom implementation
 2.85.2: custom models findBy supported
 2.85.3: anti cache parameter added only if ajax method not specified or set to GET
 2.86: comp(onent) supports functions as root subobject, like obj.pet() mapped to pet: jiant.comp("petTm")
 2.87: propagate mapping now supports functions with this pointing to object, to enable {tp: function() {return translate(this.tp)}}
 2.88: jiant.comp accepts params: jiant.comp(tmName, params), passed to customRenderer as part of source object for better customization,
 jiant.comp doesn't call template for null data, just sets element html to empty value
 2.88.1: fixed jiant.comp for templates
 2.88.2: view customRenderer called after components, for back compatibility
 2.88.3: model once fixes for model itself and collection functions
 2.89: alt_shift_click in dev mode prints bound model and binding stack trace to console
 2.90: some refactoring, jiant.data, cssFlag and cssMarker now accept field name mapping, like a: cssFlag("amount", "cls") produces "a" class mapped to amount field as "cls" class name
 2.90.1: same as previous, with templates support
 2.90.2: fixed pure old cssMarker
 2.90.3: jiant.meta accepts arguments, which could be retrieved during runtime, for any purposes
 2.90.4: fixed cssFlag/cssMarker/data mapping to field, having no own declaration
 2.91: fixed error when loading module which includes already loaded styles, but not yet loaded js
 2.92: model field .enqueue organizes queue of values on field, sets next when value reset to null/undefined; m.user.cmd.enqueue
 2.92.1: IE 11 startsWith polyfill
 2.93: improved templates rendering, removed devHook to improve performance on large templates amounts
 2.93.1: endsWith polyfill, fixed ajax urls construction
 2.93.2: ajax urls concatenation fix
 2.94: view component methods showOn(cbOrFld), hideOn(cbOrFld), switchClassOn(cbOrCls, cbOrFld); view/template methods jInit() - init
 2.94.1: showOn, hideOn, switchClsOn one more optional arg - exact value to perform action on
 2.94.2: jiant.comp supports arrays of data objects
 2.95: bindByTag parameter added for app, to bind elements by tags, values: 'after-class' (try by tag if class not found), 'before-class',
 any other value to bind by tag only or omit to use only class binding. Tag binding ignores appPrefix
 2.95.1: minor optimization
 2.95.2: svg prevention
 2.95.3: showOn, hideOn, switchClsOn - exact val now may be array of exact values
 2.96: model auto-method listByXXXIn(arraysOfVals), listByXInAndYIn(xArr, yArr) also supported
 2.96.1: nlabel(null) properly works now
 2.96.2: jiant.parseTemplate handles non-strict source html string
 2.97: bindByTag works for templates
 2.97.1: added propagate function to jiant.comp
 2.98: view/template, used as comp, may use one more setting, compCbSet: {start: () => {}, end: () => {}, perItem: (obj, elem) => {}}
 2.99: optional(comp("...")) - could be used for optional component lists to render nothing, if bound value is not present
 2.99.1: fixed index update on removed object
 2.99.2: proper handling of *In fields names in models by findBy*In
 2.99.3: fixes around reverse binding and tm optimization
 2.99.4: customRenderer could be declared in json file like jInit
